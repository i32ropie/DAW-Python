"""
Ejemplo de uso de clases en Python
"""


class Test():
    """
    Ejemplo para ilustrar una clase en Python.

    Usaremos variables de clase y de instancia, m√©todos de instancia, de clase y est√°ticos
    """
    n_tests = 0  # variables de clase (est√°tica)
    __centro = ""

    def __init__(self, nombre, comentario):
        """Constructor de la clase"""
        self.__nombre = nombre  # variable de instancia (oculta)
        self.comentario = comentario  # variable de instancia
        self.__ciclo = ""  # variable de instancia (oculta)
        Test.n_tests += 1  # incrementamos el n√∫mero de tests

    @property
    def nombre(self):
        """
        Similar getter de Java, pero con una filosof√≠a 'pythonica'.
        En Python se prefiere acceder a los atributos directamente, si son ocultos se hace
        con una propiedad.
        """
        return self.__nombre

    def get_nombre(self):  # NO SE DEBE HACER AS√ç EL GETTER, esto es tipo Java
        """
        Getter tipo Java, NO SE DEBE USAR AS√ç.

        En Python debe hacerse usando @property
        """
        return self.__nombre

    @property
    def ciclo(self):
        """Similar getter de Java"""
        return self.__ciclo

    def get_ciclo(self):  # NO SE DEBE HACER AS√ç EL GETTER, esto es tipo Java
        """
        Getter tipo Java, NO SE DEBE USAR AS√ç.

        En Python debe hacerse usando @property
        """
        return self.__ciclo

    @ciclo.setter
    def ciclo(self, c):
        """
        Similar al setter de Java, pero con una filosof√≠a 'pythonica'.
        Accedemos (desde fuera) a la propiedad del objeto como si fuera un atributo y le damos valor.
        """
        c = c.upper()
        if c in ["DAW", "ASIR"]:
            self.__ciclo = c
        else:
            print(f"ERROR: {c} no es un ciclo v√°lido")

    def set_ciclo(self, c):  # NO SE DEBE HACER AS√ç EL SETTER, esto es tipo Java
        """
        Setter tipo Java, NO SE DEBE USAR AS√ç.

        En Python debe hacerse usando @property
        """
        c = c.upper()
        if c in ["DAW", "ASIR"]:
            self.__ciclo = c
        else:
            print(f"ERROR: {c} no es un ciclo v√°lido")

    @classmethod
    def asigna_centro(cls, centro):
        """
        M√©todo de clase.
        Observa que debe llevar tambi√©n un primer par√°metro obligatorio, la clase,
        por convenci√≥n 'cls'.
        En este caso le asigna un valor a la variable de clase (y oculta) __centro
        """
        cls.__centro = centro

    @staticmethod
    def dame_animos():
        """
        M√©todo est√°tico. Igual que anteponer 'static' en Java.
        Las caracter√≠sticas principales de un m√©todo est√°tico es que pueden ser llamados sin tener una instancia de la
        clase, adem√°s este tipo de m√©todos no tienen acceso al exterior, por lo cual no pueden acceder a ning√∫n otro
        atributo o llamar a ninguna otra funci√≥n dentro de la clase.
        """
        print("No se puede vencer a la persona que nunca se rinde üòé\n")

    def __str__(self):
        """Como toString() en Java"""
        estado = f"Nombre: {self.__nombre}\t {self.comentario}"
        if self.ciclo:
            estado += f"\t {self.ciclo}"  # usamos la propiedad
        if Test.__centro:
            estado += f"\t {Test.__centro}"
        return estado

    def __del__(self):
        """
        Destructor.
        A veces nos gustar√≠a hacer algo cuando el objeto se destruye, con este m√©todo podemos hacerlo.
        En este caso ponemos un mensaje y decrementamos el n√∫mero de tests.
        """
        print(f"--Test '{self.nombre}' que seas corregido con benevolencia--")
        Test.n_tests -= 1


# Prueba
if __name__ == "__main__":
    # Llamada a un m√©todo est√°tico de la clase, no hace falta ninguna instancia
    Test.dame_animos()

    # Creamos dos objetos
    test1 = Test("Prueba de BDA", "Formas normales")
    test2 = Test("Prueba de POO", "Conceptos b√°sicos")

    # Comprobamos cu√°ntos hay
    print(f"Total tests: {Test.n_tests}\n")

    # Mostramos sus estados
    print(test1)
    print(test2, "\n")

    # Con un m√©todo de clase ponemos nombre al centro
    Test.asigna_centro("IES Gran Capit√°n")

    # Asignamos un ciclo a este test con un m√©todo de instancia
    test2.ciclo = "DAW"

    # Mostramos sus estados (que han cambiado)
    print(test1)
    print(test2, "\n")

    # Borramos un test
    print("Mandamos a corregir test2...\n")
    del test2

    # Comprobamos cuantos tests quedan
    print("\nQuedan", Test.n_tests, "tests\n")

    # Fin
    print("----------------")
    print("That's all folks")
    print("----------------\n")
